extends layout.pug
block content
    h1 Global Heatmap
    p All countries mentioned by the BBC in the last 24 hours
    #map
    script(type='text/javascript').
        let map = L.map('map').setView([20,20], 2);
        L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png', {
            maxZoom: 20,
            attribution: '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>, &copy; <a href="https://openmaptiles.org/">OpenMapTiles</a> &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors'
        });


        // TODO: Convert from Jquery & narrow to only mentions array
        function getMapLayers() {
            $.getJSON('/maplayers',function(result){
                $.each(result, function(i, mlayer){        
                    $.getJSON('/mapjson/' + mlayer.properties.name, function(data) { addLayer(data, mlayer.properties.name ) });
                });
            });
        }
        
        let mentions_array = [];

        function getArray()  {
            fetch('/mentions')
            .then(response => response.json())
            .then(function(data){
                for(i=0;i<data.length;i++){
                    mentions_array.push(data[i])
                }
            })
        }
        getArray()
        getMapLayers()

        function getColor(d) {
            return d > 7
                ? '#e79200' // '#800026'
                : d > 6
                ? '#e79200'
                : d > 5
                ? '#ffa917'
                : d > 4
                ? '#feba45'
                : d > 3
                ? '#ffcb73'
                : d > 2
                ? '#ffdca2'
                : d === 1
                ? '#ffedd0'
                : '#ffffff';
        }

        function getCountryCount(country) {
            let count;
            for (let i = 0; i < mentions_array.length; i++) {
                if (mentions_array[i]._id === country) {
                count = mentions_array[i].count
                break;
                }
            }
            return count;
        }
        
        function getCountryColour(country) {
            return getColor(getCountryCount(country));
        }

        function style(feature) {
            return {
                fillColor: getCountryColour(feature), // .properties.name), // getColor(feature.properties.density),
                weight: 0.5,
                opacity: 1,
                color: 'white',
                dashArray: '0',
                fillOpacity: 0.7,
            };
        }

        let geojson;

        function addLayer(layer, name) {
            let leaf_layer;
            leaf_layer = L.geoJson(layer, { style: style(name), onEachFeature: onEachFeature });
            leaf_layer.addTo(map);
        }

        function highlightFeature(e) {
            let layer = e.target;

            //- layer.setStyle({
            //-     weight: 2,
            //-     color: '#666',
            //-     dashArray: '',
            //- });

            if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                layer.bringToFront();
            }

            info.update(layer.feature.properties);

        }

        function resetHighlight(e) {
            geojson.resetStyle(e.target);
            info.update();
        }

        function zoomToFeature(e) {
            map.fitBounds(e.target.getBounds());
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                //- mouseout: resetHighlight,
                click: zoomToFeature
            });
        }

        var info = L.control();

        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
            this.update();
            return this._div;
        };

        // method that we will use to update the control based on feature properties passed
        info.update = function (props) {
            this._div.innerHTML = '<h4>Number of Country Mentions</h4>' 
            +  (props ?
                '<b>' + props.name + '</b><br />' + `${getCountryCount(props.name) === undefined ? 'No' : getCountryCount(props.name)}` + ' mentions in last 24 hours'
                : 'Hover over a country');
        };

        info.addTo(map);

        var legend = L.control({position: 'bottomleft'});

        legend.onAdd = function (map) {

            var div = L.DomUtil.create('div', 'info legend'),
                grades = [1, 2, 3, 4, 5, 6, 7];
                labels = [];

            // loop through our density intervals and generate a label with a colored square for each interval
            for (var i = 0; i < grades.length; i++) {
                div.innerHTML +=
                    '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
                    grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
            }

            return div;
        };

        legend.addTo(map);
        console.log(mentions_array)

        
      

     
